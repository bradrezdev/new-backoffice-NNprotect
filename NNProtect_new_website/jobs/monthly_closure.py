"""
Job programado de cierre mensual.
Se ejecuta el √∫ltimo d√≠a del mes a las 23:59:59 (horario M√©xico Central).
Calcula todas las comisiones mensuales (Uninivel, Matching, etc).

Principios aplicados: KISS, DRY, YAGNI, POO
"""

import reflex as rx
import sqlmodel
from typing import List, Optional
from datetime import datetime, timezone

from database.users import Users
from database.periods import Periods
from NNProtect_new_website.mlm_service.commission_service import CommissionService
from NNProtect_new_website.utils.timezone_mx import get_mexico_now


class MonthlyClosureJob:
    """
    Job de cierre mensual para c√°lculo de comisiones recurrentes.
    Principio POO: Encapsula toda la l√≥gica del cierre mensual.
    """

    @classmethod
    def execute_monthly_closure(cls) -> bool:
        """
        Ejecuta el cierre mensual completo.
        Principio KISS: Proceso lineal y claro.

        Pasos:
        1. Verificar que no se haya ejecutado ya (idempotencia)
        2. Obtener per√≠odo actual
        3. Calcular comisiones Uninivel para todos los usuarios activos
        4. Calcular comisiones Matching para Embajadores
        5. Marcar per√≠odo como cerrado

        Returns:
            True si el cierre fue exitoso, False si fall√≥
        """
        try:
            print("üîÑ Iniciando cierre mensual...")

            with rx.session() as session:
                # 1. Obtener per√≠odo actual
                current_period = cls._get_current_period(session)

                if not current_period:
                    print("‚ùå No hay per√≠odo activo para cerrar")
                    return False

                # 2. Verificar idempotencia (no ejecutar si ya est√° cerrado)
                if current_period.closed_at is not None:
                    print(f"‚ö†Ô∏è  Per√≠odo {current_period.id} ya est√° cerrado")
                    return True

                print(f"üìÖ Cerrando per√≠odo: {current_period.period_name} (ID: {current_period.id})")

                # 3. Obtener todos los usuarios activos (con PV > 0 en el per√≠odo)
                active_users = cls._get_active_users(session, current_period.id)

                if not active_users:
                    print("‚ö†Ô∏è  No hay usuarios activos en este per√≠odo")
                    # Marcar per√≠odo como cerrado aunque no haya usuarios
                    current_period.closed_at = datetime.now(timezone.utc)
                    session.add(current_period)
                    session.commit()
                    return True

                print(f"üë• Procesando {len(active_users)} usuarios activos...")

                # 4. Calcular Bono Uninivel para cada usuario
                total_commissions = 0
                for user in active_users:
                    commission_ids = CommissionService.calculate_unilevel_bonus(
                        session, user.member_id, current_period.id
                    )
                    total_commissions += len(commission_ids)

                print(f"‚úÖ {total_commissions} comisiones Uninivel calculadas")

                # 5. Calcular Bono Matching para Embajadores
                matching_count = 0
                ambassador_ranks = [
                    "Embajador Transformador",
                    "Embajador Inspirador",
                    "Embajador Consciente",
                    "Embajador Solidario"
                ]

                for user in active_users:
                    # Obtener rango del usuario
                    from NNProtect_new_website.mlm_service.rank_service import RankService
                    from database.ranks import Ranks

                    rank_id = RankService.get_user_current_rank(session, user.member_id)
                    if not rank_id:
                        continue

                    rank = session.exec(
                        sqlmodel.select(Ranks).where(Ranks.id == rank_id)
                    ).first()

                    if not rank or rank.name not in ambassador_ranks:
                        continue

                    # Calcular Matching Bonus
                    matching_ids = CommissionService.calculate_matching_bonus(
                        session, user.member_id, current_period.id
                    )
                    matching_count += len(matching_ids)

                print(f"‚úÖ {matching_count} comisiones Matching calculadas")

                # 6. Marcar per√≠odo como cerrado
                current_period.closed_at = datetime.now(timezone.utc)
                session.add(current_period)
                session.commit()

                print(f"‚úÖ Cierre mensual completado exitosamente")
                print(f"üìä Total comisiones: {total_commissions}")
                return True

        except Exception as e:
            print(f"‚ùå Error en cierre mensual: {e}")
            return False

    @classmethod
    def _get_current_period(cls, session) -> Optional[Periods]:
        """
        Obtiene el per√≠odo actual activo.
        Principio DRY: M√©todo reutilizable.
        """
        try:
            current_date = get_mexico_now()

            current_period = session.exec(
                sqlmodel.select(Periods)
                .where(
                    (Periods.starts_on <= current_date) &
                    (Periods.ends_on >= current_date)
                )
            ).first()

            return current_period

        except Exception as e:
            print(f"‚ùå Error obteniendo per√≠odo actual: {e}")
            return None

    @classmethod
    def _get_active_users(cls, session, period_id: int) -> List[Users]:
        """
        Obtiene usuarios activos (con PV > 0) en el per√≠odo.
        Principio KISS: Query directo.

        Args:
            session: Sesi√≥n de base de datos
            period_id: ID del per√≠odo

        Returns:
            Lista de usuarios activos
        """
        try:
            from database.orders import Orders, OrderStatus

            # Subquery: member_ids con √≥rdenes confirmadas en el per√≠odo
            active_member_ids_subquery = (
                sqlmodel.select(Orders.member_id)
                .where(
                    (Orders.period_id == period_id) &
                    (Orders.status == OrderStatus.PAYMENT_CONFIRMED.value) &
                    (Orders.total_pv > 0)
                )
                .distinct()
                .subquery()
            )

            # Query principal: obtener usuarios
            active_users = session.exec(
                sqlmodel.select(Users)
                .where(Users.member_id.in_(sqlmodel.select(active_member_ids_subquery)))
            ).all()

            return list(active_users)

        except Exception as e:
            print(f"‚ùå Error obteniendo usuarios activos: {e}")
            return []


def run_monthly_closure():
    """
    Funci√≥n wrapper para ejecutar el cierre mensual.
    Puede ser llamada por scheduler o manualmente.
    """
    return MonthlyClosureJob.execute_monthly_closure()


# Para testing manual
if __name__ == "__main__":
    print("üß™ Ejecutando cierre mensual manualmente...")
    success = run_monthly_closure()
    if success:
        print("‚úÖ Cierre mensual exitoso")
    else:
        print("‚ùå Cierre mensual fall√≥")
