"""
Script para verificar que Admin App est√° correctamente integrado.
Verifica imports, tablas de base de datos y funcionalidad b√°sica.
"""

import sys
import os

# Agregar el directorio ra√≠z al path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

def test_imports():
    """Verifica que todos los m√≥dulos del Admin App se importan correctamente."""
    print("\n" + "="*60)
    print("üîç VERIFICANDO IMPORTS DEL ADMIN APP")
    print("="*60)

    try:
        from NNProtect_new_website.Admin_app import theme
        print("‚úÖ theme.py importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando theme.py: {e}")
        return False

    try:
        from NNProtect_new_website.Admin_app import components
        print("‚úÖ components.py importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando components.py: {e}")
        return False

    try:
        from NNProtect_new_website.Admin_app import admin_state
        print("‚úÖ admin_state.py importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando admin_state.py: {e}")
        return False

    try:
        from NNProtect_new_website.Admin_app.admin_page import admin_page
        print("‚úÖ admin_page.py importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando admin_page.py: {e}")
        return False

    return True

def test_database_tables():
    """Verifica que las tablas necesarias existen en la base de datos."""
    print("\n" + "="*60)
    print("üóÑÔ∏è  VERIFICANDO TABLAS DE BASE DE DATOS")
    print("="*60)

    try:
        import reflex as rx
        from sqlmodel import select
        from database import Users, UserProfiles, Addresses, Wallets, Products, Orders

        with rx.session() as session:
            # Verificar tabla Users
            users_count = session.exec(select(Users)).all()
            print(f"‚úÖ Tabla 'users' existe ({len(users_count)} usuarios)")

            # Verificar tabla UserProfiles
            profiles_count = session.exec(select(UserProfiles)).all()
            print(f"‚úÖ Tabla 'userprofiles' existe ({len(profiles_count)} perfiles)")

            # Verificar tabla Addresses
            addresses_count = session.exec(select(Addresses)).all()
            print(f"‚úÖ Tabla 'addresses' existe ({len(addresses_count)} direcciones)")

            # Verificar tabla Wallets
            wallets_count = session.exec(select(Wallets)).all()
            print(f"‚úÖ Tabla 'wallets' existe ({len(wallets_count)} billeteras)")

            # Verificar tabla Products
            products_count = session.exec(select(Products)).all()
            print(f"‚úÖ Tabla 'products' existe ({len(products_count)} productos)")

            # Verificar tabla Orders
            orders_count = session.exec(select(Orders)).all()
            print(f"‚úÖ Tabla 'orders' existe ({len(orders_count)} √≥rdenes)")

            return True

    except Exception as e:
        print(f"‚ùå Error verificando tablas: {e}")
        return False

def test_services():
    """Verifica que los servicios necesarios est√°n disponibles."""
    print("\n" + "="*60)
    print("üîß VERIFICANDO SERVICIOS")
    print("="*60)

    try:
        from NNProtect_new_website.mlm_service.wallet_service import WalletService
        print("‚úÖ WalletService disponible")
    except Exception as e:
        print(f"‚ùå Error importando WalletService: {e}")
        return False

    try:
        from NNProtect_new_website.mlm_service.loyalty_service import LoyaltyService
        print("‚úÖ LoyaltyService disponible")
    except Exception as e:
        print(f"‚ùå Error importando LoyaltyService: {e}")
        return False

    try:
        from NNProtect_new_website.mlm_service.exchange_service import ExchangeService
        print("‚úÖ ExchangeService disponible")
    except Exception as e:
        print(f"‚ùå Error importando ExchangeService: {e}")
        return False

    return True

def main():
    """Funci√≥n principal."""
    print("\n" + "="*60)
    print("üöÄ VERIFICACI√ìN DE INTEGRACI√ìN - ADMIN APP")
    print("="*60)

    results = {
        "imports": test_imports(),
        "database": test_database_tables(),
        "services": test_services()
    }

    print("\n" + "="*60)
    print("üìä RESUMEN DE VERIFICACI√ìN")
    print("="*60)

    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} - {test_name.upper()}")

    all_passed = all(results.values())

    if all_passed:
        print("\nüéâ ¬°Todas las verificaciones pasaron exitosamente!")
        print("\nüìç Puedes acceder al Admin App en: http://localhost:3000/admin")
        print("\n‚ú® Funcionalidades disponibles:")
        print("   1. Crear Cuenta sin Sponsor")
        print("   2. Crear Usuarios de Prueba")
        print("   3. Crear √ìrdenes")
        print("   4. Crear Red Descendente")
        print("   5. Agregar Dinero a Billetera")
        print("   6. Agregar Puntos de Lealtad")
    else:
        print("\n‚ö†Ô∏è  Algunas verificaciones fallaron. Revisa los errores arriba.")

    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
